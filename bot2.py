import logging
import re
from geopy.distance import geodesic
import requests
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    PicklePersistence,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "e4c998b8-3a31-4106-a0ec-579edca63eeb"
TO_USER_ID = "7617992512"
BOT_TOKEN = "7916151524:AAFFsrlAqDQJ4W8kCHW209YIALbSATttadE"

# –ì—Ä–∞–Ω–∏—Ü—ã –í–æ—Ä–æ–Ω–µ–∂–∞
VORONEZH_BBOX = {
    "min_lat": 51.53,
    "max_lat": 51.83,
    "min_lon": 39.05,
    "max_lon": 39.40,
}

# –¢–∞—Ä–∏—Ñ—ã
TARIFFS = {
    "–°—Ç–∞–Ω–¥–∞—Ä—Ç": {"base_fare": 300, "city_km_rate": 55},
    "–≠—Ä–º–∏—Ç–∞–∂": {"base_fare": 400, "city_km_rate": 65},
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    START_ADDRESS,
    END_ADDRESS,
    PHONE_NUMBER,
    TAXI_TYPE,
    CONFIRM_TAXI_TYPE,
    RESTART_ADDRESS,
    REPEAT_ORDER,
) = range(7)


# ====================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======================
def is_in_voronezh(lat: float, lon: float) -> bool:
    return (
        VORONEZH_BBOX["min_lat"] <= lat <= VORONEZH_BBOX["max_lat"]
        and VORONEZH_BBOX["min_lon"] <= lon <= VORONEZH_BBOX["max_lon"]
    )


def get_coordinates(address: str) -> tuple[float, float] | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º "–í–æ—Ä–æ–Ω–µ–∂" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    # –î–æ–±–∞–≤–ª—è–µ–º "–í–æ—Ä–æ–Ω–µ–∂" –∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É
    full_address = f"{address}, –í–æ—Ä–æ–Ω–µ–∂"
    logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è: {full_address}")

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –í–æ—Ä–æ–Ω–µ–∂–∞
    bbox = f"{VORONEZH_BBOX['min_lat']},{VORONEZH_BBOX['min_lon']}~{VORONEZH_BBOX['max_lat']},{VORONEZH_BBOX['max_lon']}"
    url = f"https://geocode-maps.yandex.ru/1.x/?geocode={full_address}&format=json&apikey={API_KEY}&bbox={bbox}&lang=ru_RU"

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        features = data["response"]["GeoObjectCollection"]["featureMember"]
        if not features:
            logger.warning("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None

        pos = features[0]["GeoObject"]["Point"]["pos"]
        lon, lat = map(float, pos.split())

        if not is_in_voronezh(lat, lon):
            logger.warning("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –∑–æ–Ω—ã –í–æ—Ä–æ–Ω–µ–∂–∞")
            return None

        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
        return (lat, lon)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        return None


def validate_phone_number(phone: str) -> bool:
    return re.match(r"^\+7\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$", phone) is not None


def get_yandex_map_link(start: tuple, end: tuple) -> str:
    return f"https://yandex.ru/maps/?rtext={start[0]},{start[1]}~{end[0]},{end[1]}&rtt=auto"


def calculate_trip_cost(taxi_type: str, distance: float) -> float:
    return TARIFFS[taxi_type]["base_fare"] + distance * TARIFFS[taxi_type]["city_km_rate"]


# ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ======================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöñ –í—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏", callback_data="call_taxi")]]
    await update.message.reply_text(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç TaxiTroika –ø–æ –∑–∞–∫–∞–∑—É —Ç–∞–∫—Å–∏ –≤ –≥–æ—Ä–æ–¥–µ –í–æ—Ä–æ–Ω–µ–∂üöï.\n"
        "–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏ - –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ. ‚¨áÔ∏è\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –í—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ –Ω–æ–º–µ—Ä–∞–º‚òéÔ∏è: 200-11-11 ; 200-33-33 ; 200-22-20 .",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["__state__"] = START_ADDRESS
    await query.message.reply_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: —É–ª. –ü—É—à–∫–∏–Ω–∞, 10):")
    return START_ADDRESS


async def start_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text
    coords = get_coordinates(address)

    if not coords:
        await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return START_ADDRESS

    context.user_data["start_address"] = address
    context.user_data["__state__"] = END_ADDRESS
    keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]]
    await update.message.reply_text(
        "‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nüìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return END_ADDRESS


async def end_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    address = update.message.text
    coords = get_coordinates(address)

    if not coords:
        await update.message.reply_text("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return END_ADDRESS

    context.user_data["end_address"] = address
    context.user_data["__state__"] = PHONE_NUMBER
    keyboard = [[InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back")]]
    await update.message.reply_text(
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (+7 900 123 45 67):",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return PHONE_NUMBER


async def phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text

    if not validate_phone_number(phone):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü—Ä–∏–º–µ—Ä: +7 900 123 45 67")
        return PHONE_NUMBER

    context.user_data["phone_number"] = phone
    context.user_data["__state__"] = TAXI_TYPE
    await update.message.reply_text("‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç!", reply_markup=ReplyKeyboardRemove())

    reply_markup = ReplyKeyboardMarkup(
        [[KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç"), KeyboardButton("–≠—Ä–º–∏—Ç–∞–∂")]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await update.message.reply_text("üöï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–∫—Å–∏:", reply_markup=reply_markup)
    return TAXI_TYPE


async def taxi_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected_type = update.message.text

    if selected_type not in TARIFFS:
        await update.message.reply_text("‚ö† –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!")
        return TAXI_TYPE

    context.user_data["taxi_type"] = selected_type
    context.user_data["__state__"] = CONFIRM_TAXI_TYPE
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="confirm_no")],
    ]
    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ '{selected_type}'?",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return CONFIRM_TAXI_TYPE


async def confirm_taxi_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_yes":
        await query.message.delete()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚åõ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–∫–∞–∑...",
            reply_markup=ReplyKeyboardRemove(),
        )
        return await process_order(update, context)

    elif query.data == "confirm_no":
        await query.message.delete()
        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç"), KeyboardButton("–≠—Ä–º–∏—Ç–∞–∂")]],
            resize_keyboard=True,
        )
        await query.message.reply_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–∫—Å–∏:", reply_markup=reply_markup)
        context.user_data["__state__"] = TAXI_TYPE
        return TAXI_TYPE


async def back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        current_state = context.user_data.get("__state__")
        states_order = [START_ADDRESS, END_ADDRESS, PHONE_NUMBER, TAXI_TYPE, CONFIRM_TAXI_TYPE]

        if current_state is None:
            await query.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥.")
            return ConversationHandler.END

        if current_state in states_order:
            index = states_order.index(current_state)
            if index > 0:
                prev_state = states_order[index - 1]
                context.user_data["__state__"] = prev_state

                if prev_state == START_ADDRESS:
                    context.user_data.pop("start_address", None)
                    await query.edit_message_text("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:")
                elif prev_state == END_ADDRESS:
                    context.user_data.pop("end_address", None)
                    await query.edit_message_text("üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å:")
                elif prev_state == PHONE_NUMBER:
                    context.user_data.pop("phone_number", None)
                    await query.edit_message_text("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
                elif prev_state == TAXI_TYPE:
                    context.user_data.pop("taxi_type", None)
                    reply_markup = ReplyKeyboardMarkup(
                        [[KeyboardButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç"), KeyboardButton("–≠—Ä–º–∏—Ç–∞–∂")]],
                        resize_keyboard=True,
                    )
                    await query.message.reply_text("üöï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–∞–∫—Å–∏:", reply_markup=reply_markup)

                return prev_state

        await query.message.reply_text("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.")
        return current_state

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")
        await query.message.reply_text("‚ö† –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END


async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data

    try:
        start_coords = get_coordinates(user_data["start_address"])
        end_coords = get_coordinates(user_data["end_address"])

        error_details = []
        if not start_coords:
            error_details.append("–ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–Ω–µ –í–æ—Ä–æ–Ω–µ–∂–∞.")
        if not end_coords:
            error_details.append("–ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–Ω–µ –í–æ—Ä–æ–Ω–µ–∂–∞.")

        if error_details:
            error_msg = "‚ö† –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥—Ä–µ—Å–∞–º–∏!\n" + "\n".join(error_details)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=error_msg + "\n\nüìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:",
            )
            return RESTART_ADDRESS

        distance = geodesic(start_coords, end_coords).kilometers
        cost = calculate_trip_cost(user_data["taxi_type"], distance)

        message = (
            f"üöñ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥–±–µ—Ä—ë—Ç –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!*\n\n"
            f"‚ñ™ –û—Ç–∫—É–¥–∞: {user_data['start_address']}\n"
            f"‚ñ™ –ö—É–¥–∞: {user_data['end_address']}\n"
            f"‚ñ™ –¢–µ–ª–µ—Ñ–æ–Ω: `{user_data['phone_number']}`\n"
            f"‚ñ™ –¢–∞—Ä–∏—Ñ: {user_data['taxi_type']}\n"
            f"‚ñ™ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ(–£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —É—á—ë—Ç–∞ –¥–æ—Ä–æ–≥): {distance:.1f} –∫–º\n"
            f"‚ñ™ –°—Ç–æ–∏–º–æ—Å—Ç—å: {cost:.0f} ‚ÇΩ\n\n"
            f"[üó∫ –ú–∞—Ä—à—Ä—É—Ç]({get_yandex_map_link(start_coords, end_coords)})"
        )

        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=message, parse_mode="Markdown"
        )

        await context.bot.send_message(
            chat_id=TO_USER_ID, text=f"üî• *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n{message}", parse_mode="Markdown"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="repeat_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="repeat_no")],
        ]
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ç–∞–∫—Å–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
        return REPEAT_ORDER

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        )
        return ConversationHandler.END


async def repeat_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "repeat_yes":
        context.user_data.clear()
        await query.message.delete()
        await query.message.reply_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:", reply_markup=ReplyKeyboardRemove()
        )
        return START_ADDRESS
    else:
        await query.message.delete()
        await query.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ç–∞–∫—Å–∏, —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏—Ç–µ /start üòä", reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


async def restart_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["start_address"] = update.message.text
    context.user_data["__state__"] = END_ADDRESS
    await update.message.reply_text("‚úÖ –ù–æ–≤—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\nüìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å:")
    return END_ADDRESS


# ====================== –ó–ê–ü–£–°–ö ======================
def main():
    persistence = PicklePersistence(filepath="conversationbot")
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .persistence(persistence)
        .build()
    )

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="^call_taxi$")],
        states={
            START_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, start_address),
                CallbackQueryHandler(back_handler, pattern="^back$"),
            ],
            END_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, end_address),
                CallbackQueryHandler(back_handler, pattern="^back$"),
            ],
            PHONE_NUMBER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, phone_number),
                CallbackQueryHandler(back_handler, pattern="^back$"),
            ],
            TAXI_TYPE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, taxi_type),
                CallbackQueryHandler(back_handler, pattern="^back$"),
            ],
            CONFIRM_TAXI_TYPE: [
                CallbackQueryHandler(confirm_taxi_type, pattern="^(confirm_yes|confirm_no)$"),
                CallbackQueryHandler(back_handler, pattern="^back$"),
            ],
            RESTART_ADDRESS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, restart_address),
                CallbackQueryHandler(back_handler, pattern="^back$"),
            ],
            REPEAT_ORDER: [
                CallbackQueryHandler(repeat_order, pattern="^(repeat_yes|repeat_no)$")
            ],
        },
        fallbacks=[CommandHandler("start", start)],
        persistent=True,
        name="main_conversation",
        per_chat=True,  # –£–±—Ä–∞–ª–∏ per_message=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.run_polling()


if __name__ == "__main__":
    main()
